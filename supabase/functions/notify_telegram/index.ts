import { serve } from 'std/http/server.ts';

/**
 * Supabase Edge Function: notify_telegram
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–º insert –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (table_bookings).
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-—á–∞—Ç –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 *   TELEGRAM_BOT_TOKEN  ‚Äì —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
 *   TELEGRAM_CHAT_ID    ‚Äì ID —á–∞—Ç–∞ (–≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞) –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
serve(async (req: Request) => {
  try {
    // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–º ‚Äì —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç record
    const { record } = await req.json();

    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN');
    const chatId = Deno.env.get('TELEGRAM_CHAT_ID');

    if (!botToken || !chatId) {
      console.error('TELEGRAM_* env vars not set');
      return new Response('Telegram env vars not configured', { status: 500 });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const message =
      `üçΩ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n` +
      `–ò–º—è: ${record.name}\n` +
      `–î–∞—Ç–∞: ${record.date} ${record.time}\n` +
      `–ì–æ—Å—Ç–µ–π: ${record.guests}\n` +
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${record.phone}`;

    const tgResp = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
      }),
    });

    const tgData = await tgResp.json();

    if (!tgData.ok) {
      console.error('Telegram API error', tgData);
      return new Response('Telegram API error', { status: 500 });
    }

    return new Response(JSON.stringify({ ok: true }), {
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('notify_telegram error', error);
    return new Response(JSON.stringify({ error: 'Internal error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
});
